import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import Reddit from '../../util/Reddit';

const initialState = {
    isLoading: false,
    isError: false,
    posts: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPostsAsync = createAsyncThunk(
  'posts/getPostsAsync',
  async (subreddit) => {
    const response = await Reddit.getPosts(subreddit);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
      [getPostsAsync.pending]: (state) => {
        state.isLoading = true;
        state.isError = false;
      },
      [getPostsAsync.rejected]: (state) => {
        state.isLoading = false;
        state.isError = true;
      },
      [getPostsAsync.fulfilled]: (state, action) => {
        state.isLoading = false;
        state.isError = false;
        state.posts = action.payload
      }
  }
  
});

//export const { increment, decrement, incrementByAmount } = postsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPosts = (state) => state.posts.posts;

export const selectPostsIsLoading = state => state.posts.isLoading;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default postsSlice.reducer;